plugins {
    id 'groovy'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'org.openapi.generator' version '7.10.0'
    id 'org.springframework.boot' version '3.4.0'
}

sourceSets {
    main {
        java {
            srcDir(layout.buildDirectory.dir("generated/sources/openapi/src/main/java"))
        }
    }
}

group = 'dev.pollito'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.3'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    implementation 'io.micrometer:micrometer-observation:1.14.1'
    implementation 'io.micrometer:micrometer-tracing-bridge-otel:1.4.0'
    implementation 'io.swagger.core.v3:swagger-core-jakarta:2.2.26'
    implementation 'org.apache.groovy:groovy'
    implementation 'org.aspectj:aspectjtools:1.9.22.1'
    implementation 'org.mapstruct:mapstruct:1.6.3'
    implementation 'org.openapitools:jackson-databind-nullable:0.2.6'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    runtimeOnly 'com.h2database:h2'
    testImplementation 'org.spockframework:spock-core:2.4-M4-groovy-4.0'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('compileJava') {
    dependsOn 'openApiGenerate'
    options.annotationProcessorPath = configurations.annotationProcessor
}

tasks.named('compileGroovy'){
    groovyOptions.javaAnnotationProcessing = true
}

tasks.named('test') {
    useJUnitPlatform()
    testLogging {
        events "started", "passed", "skipped", "failed"
    }
}

openApiGenerate {
    apiPackage = "${group}.${project.name}.api".toString()
    configOptions = [
            interfaceOnly: "true",
            skipOperationExample: "true",
            useEnumCaseInsensitive: "true",
            useSpringBoot3: "true"
    ]
    generateApiTests = false
    generateApiDocumentation = false
    generateModelTests = false
    generateModelDocumentation = false
    generatorName = "spring"
    inputSpec = "$rootDir/src/main/resources/openapi/roundest.yaml".toString()
    modelPackage = "${group}.${project.name}.model".toString()
    outputDir = layout.buildDirectory.dir("generated/sources/openapi").get().asFile.toString()
}
